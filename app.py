import time
import imaplib
import email
import os
import requests

# Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ù…Ù† Ø§Ù„Ù…ØªØºÙŠØ±Ø§Øª Ø§Ù„Ø³Ø±ÙŠØ©
GMAIL_USER = os.getenv("GMAIL_USER")
GMAIL_PASSWORD = os.getenv("GMAIL_PASSWORD")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Ø§Ù„Ø§ØªØµØ§Ù„ Ø¨Ù€ Gmail
def connect_to_gmail():
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(GMAIL_USER, GMAIL_PASSWORD)
    mail.select("inbox")
    return mail

# Ø¬Ù„Ø¨ Ø¢Ø®Ø± Ø±Ø³Ø§Ù„Ø©
def get_latest_email(mail):
    status, messages = mail.search(None, "UNSEEN")
    if status != "OK":
        return None

    for num in messages[0].split():
        status, data = mail.fetch(num, "(RFC822)")
        if status != "OK":
            continue
        msg = email.message_from_bytes(data[0][1])

        # Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø¹Ø§Ù…Ø©
        subject = msg["subject"]
        from_ = msg["from"]

        # Ø¬Ù„Ø¨ Ø§Ù„Ù…Ø­ØªÙˆÙ‰
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    try:
                        body = part.get_payload(decode=True).decode(errors="ignore")
                    except:
                        body = "[ØºÙŠØ± Ù‚Ø§Ø¨Ù„ Ù„Ù„Ù‚Ø±Ø§Ø¡Ø©]"
        else:
            try:
                body = msg.get_payload(decode=True).decode(errors="ignore")
            except:
                body = "[ØºÙŠØ± Ù‚Ø§Ø¨Ù„ Ù„Ù„Ù‚Ø±Ø§Ø¡Ø©]"

        return f"ðŸ“§ **New Email**\nFrom: {from_}\nSubject: {subject}\n\n{body[:500]}"

    return None

# Ø¥Ø±Ø³Ø§Ù„ Ù„ØªÙ„ÙŠØºØ±Ø§Ù…
def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    requests.post(url, data=data)

# Ø­Ù„Ù‚Ø© Ø§Ù„Ø¹Ù…Ù„
def main():
    while True:
        try:
            mail = connect_to_gmail()
            message = get_latest_email(mail)
            if message:
                send_to_telegram(message)
            mail.logout()
        except Exception as e:
            print("Error:", e)
        time.sleep(60)

if __name__ == "__main__":
    main()
